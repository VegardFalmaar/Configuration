" ===== [ Mapleader ] ================
let mapleader = " "



" ===== [ General ] ================
syntax on           " of course
set noerrorbells    " turn off crash sound on the bottom
set number          " line numbers
set wildmenu        " display all matching files when tab completed
set path+=**        " search down into subfolders
set pastetoggle=<F3> " toggle between paste and nopaste mode
set laststatus=0    " do not display last status
" put all swap files in the same place
set directory^=$HOME/.vim/swap//
" because I am stupid and write :W instead of :w
command! WQ wq
command! Wq wq
command! W w
command! Q q
" save
nmap <Leader>w :w<CR>
" run the macro in q register
nnoremap Q @q
" new tab
nnoremap <c-t> :tabnew<cr>



" ===== [ Indentation ] ================
set expandtab       " tabs are spaces
set smartindent     " indent for me
set autoindent      " indentation of the next line should be the same as this
set tabstop=4       " tab indentation levels every four columns
set softtabstop=4
set shiftwidth=4
autocmd Filetype    html,htmldjango,cpp,c,cuda
  \ setlocal tabstop=2 |
  \ setlocal softtabstop=2 |
  \ setlocal shiftwidth=2

" do not remove indentation for comments
set cindent cinkeys-=0#



" ===== [ Basic movement and commands ] ================
" exit insert mode
inoremap jh <Esc>

" capital Y yanks to the end of the line instead of whole line
nnoremap Y y$

" make } move to the next blank space, but the cursor in the middle of the
" screen
nnoremap { {zz
nnoremap } }zz

" paste over selected word should not add selected word to copy register
xnoremap <leader>p "_dP



" ===== [ Search and replace ] ================
set smartcase       " case sensitive search
" highlighting
set incsearch
set hlsearch
nnoremap <silent> <CR> :nohlsearch<CR><CR>

" shortcut for :%s/<CURSOR_HERE>/g
nnoremap <leader>s :%s//g<LEFT><LEFT>

" remove trailing whitespace (substitute with nothing)
nnoremap <silent> <leader>fw :%s/\s\+$//g<CR>



" ===== [ Relative numbers ] ================
set relativenumber



" ===== [ Split navigations ] ================
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>



" ===== [ Enable folding ] ================
" fold with the spacebar
nnoremap <leader><space> za
set foldmethod=indent
set foldlevel=99



" ===== [ Basic visual ] ================
set encoding=utf-8
set background=dark

" disable bold font
set t_md=

" for text files
autocmd Filetype    text,markdown
    \   setlocal textwidth=79
" for git commits
autocmd Filetype    gitcommit
    \   setlocal textwidth=72



" ===== [ Highlight bad practice ] ================
""" 80 char column
" highlight ColorColumn ctermbg=0 guibg=lightgrey
highlight ColorColumn ctermbg=23 guibg=white
" only highlight when I'm going over the 80 char line
autocmd WinEnter * silent! call matchadd('ColorColumn', '\%81v', 100)

" I imagine this is more efficient as it is built in
exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
set list



" ===== [ Display the file tree for the current dir ] ================
nnoremap <leader>o :edit .<CR>
" nnoremap <leader>O :vsplit<CR> :vertical resize 35<CR> :edit .<CR>
nnoremap <leader>O :below split<CR> :edit .<CR>
let g:netrw_banner=0            " disable banner
let g:netrw_altv=1              " open splits to the right
let g:netrw_liststyle=3         " tree view
let g:netrw_sort_options = "i"  " sort alphabetically case insensitively





" ===== [ Comments ] ================
" Define a comment identifier based on the file type. The functions
" InsertComment and RemoveComment uses these.

function! InterpretCommentKeybinding(NumberOfLines)
    if (&ft=='markdown')
        call CheckBox(a:NumberOfLines)
    elseif (&ft=='python' || &ft=='sh' || &ft=='conf')
        call InsertComment("#",a:NumberOfLines)
    elseif (&ft=='c' || &ft=='cpp' || &ft=='cuda')
        call InsertComment("//",a:NumberOfLines)
    elseif (&ft=='vim')
        call InsertComment('"',a:NumberOfLines)
    endif
endfunction

function! InterpretUncommentKeybinding(NumberOfLines)
    if (&ft=='markdown')
        call UncheckBox(a:NumberOfLines)
    else
        call RemoveComment(a:NumberOfLines)
    endif
endfunction

function! CheckBox(NumberOfLines)
    normal! mm
    for i in range(1, a:NumberOfLines)
        normal! ^3lrxj
    endfor
    normal! `m
endfunction

function! UncheckBox(NumberOfLines)
    normal! mm
    for i in range(1, a:NumberOfLines)
        normal! ^3lr j
    endfor
    normal! `m
endfunction

function! InsertComment(CommentIdentifier,NumberOfLines)
    " set a mark where the cursor is currently located
    normal! mm
    " insert the comment identifier followed by a whitespace on the desired
    " number of lines
    for i in range(1, a:NumberOfLines)
        execute "normal! I" . a:CommentIdentifier . " \<Esc>"
        normal! j
    endfor
    " return to mark
    normal! `m
endfunction

function! RemoveComment(NumberOfLines)
    normal! mm
    for i in range(1, a:NumberOfLines)
        normal! ^dawj
    endfor
    normal! `m
endfunction

nnoremap <silent> <leader>cc :call InterpretCommentKeybinding(1)<CR>
nnoremap <silent> <leader>cu :call InterpretUncommentKeybinding(1)<CR>
for NumLines in range(2, 9)
    execute 'nnoremap <silent> ' . NumLines . '<leader>cc :call InterpretCommentKeybinding(' . NumLines . ')<CR>'
    execute 'nnoremap <silent> ' . NumLines . '<leader>cu :call InterpretUncommentKeybinding(' . NumLines . ')<CR>'
endfor

" do not make the new line after a comment also a comment
set formatoptions-=o | set formatoptions-=r





" ===== [ Autocompletion ] ================
" use the popup menu for completion also when there is only one match
set completeopt=menuone

" tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>
